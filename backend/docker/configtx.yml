################################################################################
#
#   Section: Organizations
#
#   - This section defines the different organizational identities which will
#   be referenced later in the configuration.
#
################################################################################
Organizations:

   # SampleOrg defines an MSP using the sampleconfig.  It should never be used
   # in production but may be used as a template for other definitions
   - &OrdererOrg
       # DefaultOrg defines the organization which is used in the sampleconfig
       # of the fabric.git development environment
       Name: OrdererOrg

       # ID to load the MSP definition as
       ID: OrdererMSP

       # MSPDir is the filesystem path which contains the MSP configuration
       MSPDir: ../hyperledger/crypto-config/ordererOrganizations/example.com/msp

       # Policies defines the set of policies at this level of the config tree
       # For organization policies, their canonical path is usually
       #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
       Policies:
           Readers:
               Type: Signature
               Rule: "OR('OrdererMSP.member')"
           Writers:
               Type: Signature
               Rule: "OR('OrdererMSP.member')"
           Admins:
               Type: Signature
               Rule: "OR('OrdererMSP.admin')"

   - &Org1
       # DefaultOrg defines the organization which is used in the sampleconfig
       # of the fabric.git development environment
       Name: Org1MSP

       # ID to load the MSP definition as
       ID: Org1MSP

       MSPDir: ../hyperledger/crypto-config/peerOrganizations/org1.example.com/msp

       # Policies defines the set of policies at this level of the config tree
       # For organization policies, their canonical path is usually
       #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
       Policies:
           Readers:
               Type: Signature
               Rule: "OR('Org1MSP.admin', 'Org1MSP.peer', 'Org1MSP.client')"
           Writers:
               Type: Signature
               Rule: "OR('Org1MSP.admin', 'Org1MSP.client')"
           Admins:
               Type: Signature
               Rule: "OR('Org1MSP.admin')"
           Endorsement:
               Type: Signature
               Rule: "OR('Org1MSP.peer')"

       # leave this flag set to true.
       AnchorPeers:
           # AnchorPeers defines the location of peers which can be used
           # for cross org gossip communication.  Note, this value is only
           # encoded in the genesis block in the Application section context
           - Host: peer0.org1.example.com
             Port: 7051

   - &Org2
       # DefaultOrg defines the organization which is used in the sampleconfig
       # of the fabric.git development environment
       Name: Org2MSP

       # ID to load the MSP definition as
       ID: Org2MSP

       MSPDir: ../hyperledger/crypto-config/peerOrganizations/org2.example.com/msp

       # Policies defines the set of policies at this level of the config tree
       # For organization policies, their canonical path is usually
       #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
       Policies:
           Readers:
               Type: Signature
               Rule: "OR('Org2MSP.admin', 'Org2MSP.peer', 'Org2MSP.client')"
           Writers:
               Type: Signature
               Rule: "OR('Org2MSP.admin', 'Org2MSP.client')"
           Admins:
               Type: Signature
               Rule: "OR('Org2MSP.admin')"
           Endorsement:
               Type: Signature
               Rule: "OR('Org2MSP.peer')"

       AnchorPeers:
           # AnchorPeers defines the location of peers which can be used
           # for cross org gossip communication.  Note, this value is only
           # encoded in the genesis block in the Application section context
           - Host: peer0.org2.example.com
             Port: 9051

################################################################################
#
#   SECTION: Capabilities
#
#   - This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
#
################################################################################
Capabilities:
    #channel capabilities apply to both the orderers and peers and must be
    #supported by both. Set value of capabilities `true` to require it
    Channel: &ChannelCapabilities
       #v2_0 ensures that orderes and peers behave according
       #to v2 orderers and peer from prior release would behave in an incompatible way
       # and therefore not able to participate in channels. This ensures that all orderer
       #and peers on  a channel are at v2 and/or later.
       v2_0: true

    #Orderer aplly only on orderer in  a channel
    #and may be dafe to used with prior release peers.
    Orderer: &OrdererCapabilities
       v2_0: True
   
    # Application capabilities apply only to the peer network, and may be safely
    # used with prior release orderers.
    # Set the value of the capability to true to require it.
    Application: &ApplicationCapabilities
       # V2_0 application capability ensures that peers behave according
       # to v2.0 application capabilities. Peers from
       # prior releases would behave in an incompatible way, and are therefore
       # not able to participate in channels at v2.0 application capability.
       # Prior to enabling V2.0 application capabilities, ensure that all
       # peers on channel are at v2.0.0 or later.
       V2_0: true

################################################################################
#
#   SECTION: Application
#
#   - This section defines the values to encode into a config transaction or
#   genesis block for application related parameters
#
################################################################################
Application: &ApplicationDefaults
    #Organixations is the list at orgs which are defined as participants
    #on the application side of network
    Organizations:
       #policies defines the set of policies at this level of config tree
       #canonocal path is /Channel/Application/<PolicyName>
       Policies:
           Readers:
               Type: ImplicitMeta
               Rule: "ANY Readers"
           Writers:
               Type: ImplicitMeta
               Rule: "ANY Writers"
           Admins:
               Type: ImplicitMeta
               Rule: "MAJORITY Endorsement"
           LifeCycleEndorsement:
               Type: ImplicitMeta
               Rule: "MAJORITY Endorsement"
           Edorsement:
               Type: ImplicitMeta
               Rule: "MAJORITY Endorsement"

    Capatiblities:
          <<: *ApplicationCapabilities

################################################################################
#
#   SECTION: Orderer
#
#   - This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters
#
#################################################################################
Orderer: &OrdererDefaults

    OrdererType: etcdraft

    EtcdRaft:
       Consenters:
       - Host: orderer.exmaple.com
         Port: 7050
         ClientTLSCert: ../hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt
         ServerTLSCert: ../hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt

    Addresses:
       - orderer.example.com: 7050
 
    #Amount of time to wait before creating a batch
    BatchTimeout: 2s   
   
    #Controls number of messgaes batched into a block
    BatchSize:
       MaxMesageCount: 10

       AbsoluteBytes: 99 MB

       PrefferedBytes: 512 KB

    Organizations:
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Endorsement"
            
        #BlockValidation specifies what signatures must be included in the Block
        #from the orderer for the peer to validate
        BlockValidaton:
             Type: ImplicitMeta
             Rule: "ANY Writers"

################################################################################
#
#   CHANNEL
#
#   This section defines the values to encode into a config transaction or
#   genesis block for channel related parameters.
#
################################################################################
Channel: &ChannelDefaults
    # Policies defines the set of policies at this level of the config tree
    # For Channel policies, their canonical path is
    #   /Channel/<PolicyName>
    Policies:
        # Who may invoke the 'Deliver' API
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        # Who may invoke the 'Broadcast' API
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        # By default, who may modify elements at this config level
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"

    # Capabilities describes the channel level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *ChannelCapabilities

################################################################################
#
#   Profile
#
#   - Different configuration profiles may be encoded here to be specified
#   as parameters to the configtxgen tool
#
################################################################################
Profiles:

    BasicChannel:
        Consortium: SampleConsortium
        <<: *ChannelDefaults
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *Org1
                - *Org2
            Capabilities:
                <<: *ApplicationCapabilities

    OrdererGenesis:
        <<: *ChannelDefaults
        Capabilities:
            <<: *ChannelCapabilities
        Orderer:
            <<: *OrdererDefaults
            OrdererType: etcdraft
            EtcdRaft:
                Consenters:
                - Host: orderer.example.com
                  Port: 7050
                  ClientTLSCert: ../hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt
                  ServerTLSCert: ../hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt
               #  - Host: orderer2.example.com
               #    Port: 8050
               #    ClientTLSCert: ../hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tlsca/server.crt
               #    ServerTLSCert: ../hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tlsca/server.crt
               #  - Host: orderer3.example.com
               #    Port: 9050
               #    ClientTLSCert: ../hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt
               #    ServerTLSCert: ../hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt
                # - Host: orderer4.example.com
                #   Port: 10050
                #   ClientTLSCert: ../hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer4.example.com/tls/server.crt
                #   ServerTLSCert: ../hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer4.example.com/tls/server.crt
                # - Host: orderer5.example.com
                #   Port: 11050
                #   ClientTLSCert: ../hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer5.example.com/tls/server.crt
                #   ServerTLSCert: ../hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer5.example.com/tls/server.crt
            Addresses:
                - orderer.example.com:7050
                # - orderer2.example.com:8050
                # - orderer3.example.com:9050
                # - orderer4.example.com:10050
                # - orderer5.example.com:11050

            Organizations:
            - *OrdererOrg
            Capabilities:
                <<: *OrdererCapabilities
        Consortiums:
            SampleConsortium:
                Organizations:
                - *Org1
                - *Org2
